#!/bin/sh

# cake-autortt - Automatically adjust CAKE qdisc RTT parameter
# based on measured RTT to active network connections
#
# This script monitors active connections using /proc/net/nf_conntrack,
# probes non-LAN hosts using ping (3 pings per host sequentially), and adjusts
# the RTT parameter of CAKE qdisc on both ingress and egress interfaces.

VERSION="1.1.0"

# Default configuration
RTT_UPDATE_INTERVAL=5
MIN_HOSTS=3
MAX_HOSTS=20
RTT_MARGIN_PERCENT=10
DEFAULT_RTT_MS=100
DL_INTERFACE=""
UL_INTERFACE=""
DEBUG=0

# Global variables
CURRENT_RTT_MS=0
HOSTS_COUNT=0
PIDFILE="/var/run/cake-autortt.pid"
TEMP_HOSTS="/dev/shm/cake-autortt-hosts"

# Load configuration from UCI
load_config() {
	# Load UCI configuration if available
	if command -v uci >/dev/null 2>&1; then
		# Read configuration values from UCI, keeping defaults if not set
		RTT_UPDATE_INTERVAL=$(uci get cake-autortt.global.rtt_update_interval 2>/dev/null || echo "$RTT_UPDATE_INTERVAL")
		MIN_HOSTS=$(uci get cake-autortt.global.min_hosts 2>/dev/null || echo "$MIN_HOSTS")
		MAX_HOSTS=$(uci get cake-autortt.global.max_hosts 2>/dev/null || echo "$MAX_HOSTS")
		RTT_MARGIN_PERCENT=$(uci get cake-autortt.global.rtt_margin_percent 2>/dev/null || echo "$RTT_MARGIN_PERCENT")
		DEFAULT_RTT_MS=$(uci get cake-autortt.global.default_rtt_ms 2>/dev/null || echo "$DEFAULT_RTT_MS")
		DL_INTERFACE=$(uci get cake-autortt.global.dl_interface 2>/dev/null || echo "$DL_INTERFACE")
		UL_INTERFACE=$(uci get cake-autortt.global.ul_interface 2>/dev/null || echo "$UL_INTERFACE")
		DEBUG=$(uci get cake-autortt.global.debug 2>/dev/null || echo "$DEBUG")
		
		log_msg "DEBUG" "Loaded UCI config: max_hosts=$MAX_HOSTS, min_hosts=$MIN_HOSTS"
	else
		log_msg "WARN" "UCI not available, using default configuration"
	fi
}

log_msg() {
	local level="$1"
	local message="$2"
	local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
	
	# Always log to syslog
	logger -t "cake-autortt" "$level: $message"
	
	# Print to stdout if debug enabled or level is INFO/ERROR
	if [ "$DEBUG" = "1" ] || [ "$level" = "INFO" ] || [ "$level" = "ERROR" ]; then
		echo "[$timestamp] cake-autortt $level: $message"
	fi
}

show_help() {
	cat << EOF
cake-autortt v$VERSION - Automatically adjust CAKE qdisc RTT parameter

Usage: cake-autortt [OPTIONS]

OPTIONS:
  --rtt-update-interval SECONDS   Interval between qdisc RTT updates (default: $RTT_UPDATE_INTERVAL)
  --min-hosts NUMBER              Minimum hosts needed for RTT calculation (default: $MIN_HOSTS)
  --max-hosts NUMBER              Maximum hosts to probe simultaneously (default: $MAX_HOSTS)
  --rtt-margin-percent PERCENT    Percentage margin added to measured RTT (default: $RTT_MARGIN_PERCENT)
  --default-rtt-ms MILLISECONDS   Default RTT when no hosts available (default: $DEFAULT_RTT_MS)
  --dl-interface INTERFACE        Download interface (auto-detected if not specified)
  --ul-interface INTERFACE        Upload interface (auto-detected if not specified)
  --debug                         Enable debug logging
  --help                          Show this help message
  --version                       Show version information

EXAMPLES:
  cake-autortt --debug
  cake-autortt --rtt-update-interval 15 --dl-interface ifb-wan --ul-interface wan

The script automatically detects active network connections from /proc/net/nf_conntrack,
filters out LAN addresses, and uses ping to measure RTT to external hosts.
Each host is pinged 3 times sequentially to calculate individual averages,
then a final average RTT is calculated across all responsive hosts.
The measured RTT is then used to adjust the CAKE qdisc RTT parameter on both
ingress and egress interfaces for optimal performance.

This sequential ping approach prevents network overload that can occur
with bulk ping utilities when probing many hosts simultaneously.

CONFIGURATION:
  Settings can be configured via UCI: /etc/config/cake-autortt
  Command line options override UCI configuration.
EOF
}

show_version() {
	echo "cake-autortt version $VERSION"
}

parse_args() {
	while [ $# -gt 0 ]; do
		case "$1" in
			--rtt-update-interval)
				RTT_UPDATE_INTERVAL="$2"
				shift 2
				;;
			--min-hosts)
				MIN_HOSTS="$2"
				shift 2
				;;
			--max-hosts)
				MAX_HOSTS="$2"
				shift 2
				;;
			--rtt-margin-percent)
				RTT_MARGIN_PERCENT="$2"
				shift 2
				;;
			--default-rtt-ms)
				DEFAULT_RTT_MS="$2"
				shift 2
				;;
			--dl-interface)
				DL_INTERFACE="$2"
				shift 2
				;;
			--ul-interface)
				UL_INTERFACE="$2"
				shift 2
				;;
			--debug)
				DEBUG=1
				shift
				;;
			--help)
				show_help
				exit 0
				;;
			--version)
				show_version
				exit 0
				;;
			*)
				echo "Unknown option: $1" >&2
				echo "Use --help for usage information" >&2
				exit 1
				;;
		esac
	done
}

is_lan_address() {
	local ip="$1"
	
	# Check for private IP ranges
	case "$ip" in
		10.*|172.1[6-9].*|172.2[0-9].*|172.3[01].*|192.168.*|169.254.*|127.*|224.*|240.*)
			return 0
			;;
		::1|fe80:*|fc*|fd*)
			return 0
			;;
		*)
			return 1
			;;
	esac
}

extract_hosts_from_conntrack() {
	# Parse /proc/net/nf_conntrack to extract non-LAN destination addresses
	local hosts_file="$1"
	
	log_msg "DEBUG" "Extracting hosts from conntrack"
	
	# Clear the hosts file
	> "$hosts_file"
	
	# Parse conntrack entries
	# Format: ipv4 2 tcp 6 299 ESTABLISHED src=192.168.1.100 dst=93.184.216.34 ...
	if [ -f "/proc/net/nf_conntrack" ]; then
		awk '
		/^ipv4.*ESTABLISHED/ {
			# Extract dst= field
			for (i = 1; i <= NF; i++) {
				if ($i ~ /^dst=/) {
					dst = substr($i, 5)  # Remove "dst="
					print dst
				}
			}
		}
		' /proc/net/nf_conntrack | while read -r host; do
			if ! is_lan_address "$host"; then
				echo "$host" >> "$hosts_file"
			fi
		done
		
		# Remove duplicates and limit to max hosts
		sort "$hosts_file" | uniq | head -n "$MAX_HOSTS" > "${hosts_file}.tmp"
		mv "${hosts_file}.tmp" "$hosts_file"
		
		HOSTS_COUNT=$(wc -l < "$hosts_file")
		log_msg "DEBUG" "Found $HOSTS_COUNT non-LAN hosts"
	else
		log_msg "ERROR" "/proc/net/nf_conntrack not available"
		HOSTS_COUNT=0
	fi
}

measure_rtt_ping() {
	local hosts_file="$1"
	local host_count
	local alive_count=0
	local total_rtt=0
	local host_rtt_sum
	local host_rtt_count
	local host_avg_rtt
	local ping_output
	local rtt_value
	
	if [ ! -s "$hosts_file" ]; then
		log_msg "DEBUG" "No hosts to probe"
		return 1
	fi
	
	host_count=$(wc -l < "$hosts_file")
	log_msg "DEBUG" "Measuring RTT using ping for $host_count hosts (3 pings each)"
	
	# Ping each host individually
	while read -r host; do
		[ -z "$host" ] && continue
		
		host_rtt_sum=0
		host_rtt_count=0
		
		# Ping the host 3 times
		for i in 1 2 3; do
			ping_output=$(ping -c 1 -W 3 "$host" 2>/dev/null)
			
			# Extract RTT from ping output (time=XX.XXX ms)
			rtt_value=$(echo "$ping_output" | grep "time=" | sed 's/.*time=\([0-9]*\.[0-9]*\).*/\1/')
			
			if [ -n "$rtt_value" ] && [ "$(echo "$rtt_value" | grep -E '^[0-9]+(\.[0-9]+)?$')" ]; then
				# Add to host sum (using awk for floating point arithmetic)
				host_rtt_sum=$(echo "$host_rtt_sum $rtt_value" | awk '{print $1 + $2}')
				host_rtt_count=$((host_rtt_count + 1))
			fi
		done
		
		# Calculate average RTT for this host if we got any responses
		if [ "$host_rtt_count" -gt 0 ]; then
			host_avg_rtt=$(echo "$host_rtt_sum $host_rtt_count" | awk '{printf "%.3f", $1 / $2}')
			total_rtt=$(echo "$total_rtt $host_avg_rtt" | awk '{print $1 + $2}')
			alive_count=$((alive_count + 1))
			log_msg "DEBUG" "Host $host: avg RTT ${host_avg_rtt}ms from $host_rtt_count pings"
		else
			log_msg "DEBUG" "Host $host: no response"
		fi
	done < "$hosts_file"
	
	log_msg "DEBUG" "ping summary: $alive_count/$host_count hosts alive"
	
	# Check if we have enough responding hosts
	if [ "$alive_count" -ge "$MIN_HOSTS" ] && [ "$(echo "$total_rtt > 0" | awk '{print ($1 > 0)}')" = "1" ]; then
		# Calculate final average RTT across all hosts
		CURRENT_RTT_MS=$(echo "$total_rtt $alive_count" | awk '{printf "%.3f", $1 / $2}')
		log_msg "DEBUG" "Average RTT from $alive_count hosts: ${CURRENT_RTT_MS}ms"
		return 0
	fi
	
	log_msg "DEBUG" "Not enough responding hosts ($alive_count < $MIN_HOSTS)"
	return 1
}

adjust_cake_rtt() {
	local target_rtt_ms="$1"
	
	# Add margin to measured RTT using awk for arithmetic with 2 decimal precision
	local adjusted_rtt
	adjusted_rtt=$(echo "$target_rtt_ms $RTT_MARGIN_PERCENT" | awk '{printf "%.2f", $1 * (1 + $2 / 100)}')
	
	# Convert to microseconds for tc command with proper precision
	local rtt_us
	rtt_us=$(echo "$adjusted_rtt" | awk '{printf "%.0f", $1 * 1000}')
	
	log_msg "INFO" "Adjusting CAKE RTT to ${adjusted_rtt}ms (${rtt_us}us)"
	
	# Update download interface
	if [ -n "$DL_INTERFACE" ]; then
		if tc qdisc change root dev "$DL_INTERFACE" cake rtt "${rtt_us}us" 2>/dev/null; then
			log_msg "DEBUG" "Updated RTT on download interface $DL_INTERFACE"
		else
			log_msg "ERROR" "Failed to update RTT on download interface $DL_INTERFACE"
		fi
	fi
	
	# Update upload interface
	if [ -n "$UL_INTERFACE" ]; then
		if tc qdisc change root dev "$UL_INTERFACE" cake rtt "${rtt_us}us" 2>/dev/null; then
			log_msg "DEBUG" "Updated RTT on upload interface $UL_INTERFACE"
		else
			log_msg "ERROR" "Failed to update RTT on upload interface $UL_INTERFACE"
		fi
	fi
}

auto_detect_interfaces() {
	if [ -z "$DL_INTERFACE" ] || [ -z "$UL_INTERFACE" ]; then
		log_msg "DEBUG" "Auto-detecting CAKE interfaces"
		
		# Find interfaces with CAKE qdisc
		local cake_interfaces
		cake_interfaces=$(tc qdisc show | grep "qdisc cake" | awk '{print $5}')
		
		if [ -z "$DL_INTERFACE" ]; then
			# Prefer ifb-* interfaces for download
			DL_INTERFACE=$(echo "$cake_interfaces" | grep "^ifb" | head -1)
			if [ -z "$DL_INTERFACE" ]; then
				DL_INTERFACE=$(echo "$cake_interfaces" | head -1)
			fi
		fi
		
		if [ -z "$UL_INTERFACE" ]; then
			# Prefer non-ifb interfaces for upload
			UL_INTERFACE=$(echo "$cake_interfaces" | grep -v "^ifb" | head -1)
			if [ -z "$UL_INTERFACE" ]; then
				UL_INTERFACE=$(echo "$cake_interfaces" | tail -1)
			fi
		fi
		
		log_msg "INFO" "Detected interfaces - DL: $DL_INTERFACE, UL: $UL_INTERFACE"
	fi
}

cleanup_and_exit() {
	log_msg "INFO" "Shutting down cake-autortt"
	rm -f "$PIDFILE" "$TEMP_HOSTS"
	exit 0
}

main_loop() {
	local last_rtt_update=0
	local current_time
	
	log_msg "INFO" "Starting cake-autortt main loop"
	log_msg "INFO" "Config: rtt_update_interval=${RTT_UPDATE_INTERVAL}s"
	log_msg "INFO" "Config: min_hosts=$MIN_HOSTS, max_hosts=$MAX_HOSTS"
	log_msg "INFO" "Config: rtt_margin=${RTT_MARGIN_PERCENT}%, default_rtt=${DEFAULT_RTT_MS}ms"
	
	while true; do
		current_time=$(date +%s)
		
		# Extract hosts from conntrack
		extract_hosts_from_conntrack "$TEMP_HOSTS"
		
		local should_update_rtt=0
		local rtt_to_use="$DEFAULT_RTT_MS"
		
		# Measure RTT if we have enough hosts
		if [ "$HOSTS_COUNT" -ge "$MIN_HOSTS" ]; then
			if measure_rtt_ping "$TEMP_HOSTS"; then
				rtt_to_use="$CURRENT_RTT_MS"
				should_update_rtt=1
				log_msg "DEBUG" "Using measured RTT: ${rtt_to_use}ms"
			else
				log_msg "DEBUG" "RTT measurement failed, using default RTT: ${rtt_to_use}ms"
				should_update_rtt=1
			fi
		else
			log_msg "DEBUG" "Not enough hosts ($HOSTS_COUNT < $MIN_HOSTS), using default RTT: ${rtt_to_use}ms"
			should_update_rtt=1
		fi
		
		# Update CAKE RTT parameter if enough time has passed
		if [ "$should_update_rtt" = "1" ] && [ $((current_time - last_rtt_update)) -ge "$RTT_UPDATE_INTERVAL" ]; then
			adjust_cake_rtt "$rtt_to_use"
			last_rtt_update="$current_time"
		fi
		
		sleep "$RTT_UPDATE_INTERVAL"
	done
}

# Main execution
parse_args "$@"

# Load configuration from UCI
load_config

# Check dependencies
command -v ping >/dev/null 2>&1 || {
	log_msg "ERROR" "ping is required but not installed"
	exit 1
}

command -v tc >/dev/null 2>&1 || {
	log_msg "ERROR" "tc (traffic control) is required but not installed"
	exit 1
}

# Auto-detect interfaces if not specified
auto_detect_interfaces

if [ -z "$DL_INTERFACE" ] && [ -z "$UL_INTERFACE" ]; then
	log_msg "ERROR" "No CAKE interfaces found. Please ensure CAKE qdisc is configured."
	exit 1
fi

# Set up signal handlers
trap cleanup_and_exit INT TERM

# Write PID file
echo $$ > "$PIDFILE"

# Start main loop
main_loop